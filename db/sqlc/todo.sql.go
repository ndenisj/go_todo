// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: todo.sql

package db

import (
	"context"
	"database/sql"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (
    user_id,
    owner, 
    title, 
    content
) VALUES (
    $1, $2, $3, $4
) RETURNING id, owner, title, content, created_at, user_id
`

type CreateTodoParams struct {
	UserID  int64  `json:"userID"`
	Owner   string `json:"owner"`
	Title   string `json:"title"`
	Content string `json:"content"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo,
		arg.UserID,
		arg.Owner,
		arg.Title,
		arg.Content,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos 
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT id, owner, title, content, created_at, user_id FROM todos
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetTodo(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}

const listTodos = `-- name: ListTodos :many
SELECT id, owner, title, content, created_at, user_id FROM todos
WHERE user_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListTodosParams struct {
	UserID int64 `json:"userID"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTodos(ctx context.Context, arg ListTodosParams) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodos, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todos 
SET 
    title = COALESCE($1, title),
    content = COALESCE($2, content)
WHERE id = $3
RETURNING id, owner, title, content, created_at, user_id
`

type UpdateTodoParams struct {
	Title   sql.NullString `json:"title"`
	Content sql.NullString `json:"content"`
	ID      int64          `json:"id"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, updateTodo, arg.Title, arg.Content, arg.ID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}
